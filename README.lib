GENERIC FUNCTIONS
-----------------

The core buffer routines in Zedit are now generic enough to use
outside of Zedit. The following files are "Zedit free":

 * buff.c
 * mark.c
 * bfile.c
 * bmsearch.c
 * reg.c
 * calc.c
 * undo.c
 * dbg.c
 * tinit.c
 * hugefile.c
 * bsocket.c
 * kbd.c (1)

(1) For windows you also need win32/winkbd.c and win32/winkeys.h

Basically anything in LFILES in the Makefile. These functions should
all work in both Unix and Windows except tgetkb() which is Unix only.

THREADING
---------

All of the routines in the files listed above are partially thread
safe. If you only access the buffer in one thread at a time, then they
are safe. However buffers cannot be shared between threads without
some form of external locking.

The exceptions are dbg.c and tinit.c. tinit.c could be made thread safe,
but character at a time output to the screen does not lend itself to
multi-threading.

MARKS
-----

There are two types of marks: static and dynamic. By default, only
static marks are supported. Static marks point at one place in a
buffer and never move. So if you insert or delete characters, the mark
could end up pointing at nothing.

However they are still very useful. For example, you can set a mark,
search, and then return to the mark. The regular expression code
relies on marks.

Dynamic marks are enabled with the HAVE_GLOBAL_MARKS and/or
HAVE_BUFFER_MARKS defines. The advantage of dynamic marks is that they
move as characters are inserted or deleted. So they stay valid even as
the text around them changes.

HAVE_GLOBAL_MARKS defines a global list of marks. This is really for
Zedit. The mark code does not maintain the global mark list, it just
updates marks on the list in the approprate places. This is only
thread safe if you guarantee locking.

HAVE_BUFFER_MARKS gives you buffer local marks which have the same
restrictions as buffers. Buffer marks are created with bcremrk().
